---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/9/4 14:27
---
require("Framework/AudioSourceHolder.lua")
require("Framework/NpcSoundCD.lua")
require("Framework/Event/EventDispatch.lua")
require("Framework/Event/EventId.lua")

AudioManager=
{
    mGo=nil,
    mDictionaryAudioSource = {},
    mBGDic = {},
    mCurrentPlayGuideSound="",
    mCurrentPlayNpcSound="",
    mPlayNpcSoundCDList={},
}


function AudioManager:Start()
    self.mGo=GameObject("LuaAudioManager")
    self.mTransform=self.mGo.transform
    GameObject.DontDestroyOnLoad(self.mGo)

    EventDispatch:RegisterEventCallback(EventId.SystemSet_Change_Notify,self,self.SystemSet_Change_Notify)
end

function AudioManager:SystemSet_Change_Notify(varData)
    Debug.Log(varData)
    if varData=="MusicToggle" then
        self:MusicChange()
    elseif varData=="MusicVolume" then
        self:MusicChange()
    elseif varData=="SoundVolume" then
        self:SoundChange()
    elseif varData=="SoundToggle" then
        self:SoundChange()
    end
end

function AudioManager:MusicChange()
    local tempMusic=SystemSetManager.GetSingleton():GetIntSetValue("MusicVolume")
    local tempMusicToggle = SystemSetManager.GetSingleton():GetIntSetValue("MusicToggle");
    for key,value in pairs(self.mBGDic) do
       local tmpAudioSource=value.mAudioSource
        if tmpAudioSource~=nil then
            if tempMusicToggle==0 then
                tmpAudioSource.mute=true
            else
                tmpAudioSource.mute=false
                tmpAudioSource.volume=tempMusic/5.0
            end
        end
    end
end


function AudioManager:SoundChange()
    local tempMusic=SystemSetManager.GetSingleton():GetIntSetValue("SoundVolume")
    local tempMusicToggle = SystemSetManager.GetSingleton():GetIntSetValue("SoundToggle");
    for key,value in pairs(self.mDictionaryAudioSource) do
        local tmpAudioSource=value.mAudioSource
        if tmpAudioSource~=nil then
            if tempMusicToggle==0 then
                tmpAudioSource.mute=true
            else
                tmpAudioSource.mute=false
                tmpAudioSource.volume=tempMusic/5.0
            end
        end
    end
end

function AudioManager:MusicMute(varMute)
    for key,value in pairs(self.mBGDic) do
        local tmpAudioSource=value.mAudioSource
        if tmpAudioSource~=nil then
                tmpAudioSource.mute=varMute
        end
    end
end

function AudioManager:SoundMute(varMute)
    for key,value in pairs(self.mDictionaryAudioSource) do
        local tmpAudioSource=value.mAudioSource
        if tmpAudioSource~=nil then
            tmpAudioSource.mute=varMute
        end
    end
end

function AudioManager:PlayBGAudio(varAudioPath, varLoop)
    UnityEngine.Debug.Log("PlayBGAudio:"  .. varAudioPath)

    local tmpAudioSource = null

    --先在缓存中查找
    for key,value in pairs(self.mBGDic) do
        if value.mAudioPath==varAudioPath then
            tmpAudioSource=value.mAudioSource
            if tmpAudioSource~=nil then
                tmpAudioSource:Play()
                tmpAudioSource.loop=varLoop
                return
            end
        end
    end

    --缓存中没有找到，去读取文件

    --先创建Holder
    local tmpAudioSourceHolder=AudioSourceHolder.new()
    tmpAudioSourceHolder.mPlay=true
    tmpAudioSourceHolder.mAudioPath=varAudioPath
    table.insert(self.mBGDic,tmpAudioSourceHolder)

    ResourcesManager.GetSingleton():Load(varAudioPath,function(varObject)
        local tmpAudioClip=varObject

        local tmpGameObject=GameObject()
        tmpGameObject.name=varAudioPath
        tmpGameObject.transform:SetParent(self.mTransform)

        --tmpGameObject.transform:SetParent(transform)
        tmpAudioSource=tmpGameObject:AddComponent(AudioSource)
        tmpAudioSource.clip=tmpAudioClip

        --更新 Holder
        for key,value in pairs(self.mBGDic) do
            if value.mAudioPath==varAudioPath then
                if value.mPlay then
                    tmpAudioSource:Play()
                    value.mAudioSource=tmpAudioSource
                    tmpAudioSource.loop=varLoop
                    break
                end
            end
        end


    end,0)
end

function AudioManager:PlayAudio(varAudioPath, varLoop)
    Debug.Log("PlayAudio:" .. varAudioPath)
    local tmpAudioSource = null

    --先在缓存中查找
    for key,value in pairs(self.mDictionaryAudioSource) do
        if value.mAudioPath==varAudioPath then
            tmpAudioSource=value.mAudioSource
            if tmpAudioSource~=nil then
                tmpAudioSource:Play()
                tmpAudioSource.loop=varLoop
                return
            end
        end
    end

    --缓存中没有找到，去读取文件

    --先创建Holder
    local tmpAudioSourceHolder=AudioSourceHolder.new()
    tmpAudioSourceHolder.mPlay=true
    tmpAudioSourceHolder.mAudioPath=varAudioPath
    table.insert(self.mDictionaryAudioSource,tmpAudioSourceHolder)

    ResourcesManager.GetSingleton():Load(varAudioPath,function(varObject)
        local tmpAudioClip=varObject

        local tmpGameObject=GameObject()
        tmpGameObject.name=varAudioPath
        tmpGameObject.transform:SetParent(self.mTransform)

        --tmpGameObject.transform:SetParent(transform)
        tmpAudioSource=tmpGameObject:AddComponent(AudioSource)
        tmpAudioSource.clip=tmpAudioClip

        --更新 Holder
        for key,value in pairs(self.mDictionaryAudioSource) do
            if value.mAudioPath==varAudioPath then
                if value.mPlay then
                    tmpAudioSource:Play()
                    value.mAudioSource=tmpAudioSource
                    tmpAudioSource.loop=varLoop
                    break
                end
            end
        end

    end,0)
end


function AudioManager:PlayGuideSound(varAudioPath)
    if self.mCurrentPlayNpcSound~=nil then
        if self.mCurrentPlayNpcSound~="" then
            self:StopAudio(self.mCurrentPlayNpcSound)
        end
    end

    if self.mCurrentPlayGuideSound~=nil then
        if self.mCurrentPlayGuideSound~="" then
            for key,value in pairs(self.mDictionaryAudioSource) do
                if value.mAudioPath==self.mDictionaryAudioSource then
                    self:StopAudio(self.mDictionaryAudioSource)
                    break
                end
            end
        end
    end

    self.mCurrentPlayGuideSound=varAudioPath
    self:PlayAudio(self.mCurrentPlayGuideSound,false)
end

function AudioManager:PlayNpcSound(varAudioPath,varCD)
    --如果在播放指引音效就不播NPC的音效了
    if self.mCurrentPlayGuideSound~=nil then
        if self.mCurrentPlayGuideSound~="" then
            for key,value in pairs(self.mDictionaryAudioSource) do
                if value.mAudioPath==self.mCurrentPlayGuideSound then
                    if value.mAudioSource~=nil then
                        if value.mAudioSource.isPlaying then
                            return
                        end
                    end
                end
            end

        end
    end

    if self.mCurrentPlayNpcSound==varAudioPath then
        return
    end

    if self.mCurrentPlayNpcSound~=nil then
        if self.mCurrentPlayNpcSound~="" then
            self:StopAudio(self.mCurrentPlayNpcSound)
        end
    end

    self.mCurrentPlayNpcSound=varAudioPath

    local tmpFind=false
    local tmpNpcSoundCD=nil
    for key,value in pairs(self.mPlayNpcSoundCDList) do
        if value.mAudioPath == self.mCurrentPlayNpcSound then
            tmpFind=true
            tmpNpcSoundCD=value
            break
        end
    end

    if tmpFind==false    then
        tmpNpcSoundCD=NpcSoundCD.new()
        tmpNpcSoundCD.mAudioPath=varAudioPath
        tmpNpcSoundCD.mCD=varCD

        table.insert(self.mPlayNpcSoundCDList,tmpNpcSoundCD)
    else
        if tmpNpcSoundCD.mCD>0 then
            return
        end
    end

    tmpNpcSoundCD.mCD=varCD

    self:PlayAudio(varAudioPath,false)
end

function AudioManager:StopAudio(varAudioPath)
    for key,value in pairs(self.mDictionaryAudioSource) do
        tmpAudioSource=value.mAudioSource
        if tmpAudioSource~=nil then
            tmpAudioSource:Stop()
        else
            value.mPlay=false
        end
    end
end

function AudioManager:StopMusic(varAudioPath)
    for key,value in pairs(self.mBGDic) do
        tmpAudioSource=value.mAudioSource
        if tmpAudioSource~=nil then
            tmpAudioSource:Stop()
        else
            value.mPlay=false
        end
    end
end

function AudioManager:Update()
    for key,value in pairs(self.mPlayNpcSoundCDList) do
        value.mCD=value.mCD-Time.deltaTime
    end


    for key,value in pairs(self.mBGDic) do
        if value.mAudioSource~=nil then
            if value.mAudioSource.isPlaying~= true then
                GameObject.Destroy(value.mAudioSource.gameObject)
                value.mAudioSource=nil
                table.remove(self.mBGDic,key)

                ResourcesManager.GetSingleton():UnloadOne(value.mAudioPath);
                UnityEngine.Debug.Log("Unload:" .. value.mAudioPath)
            end
        end
    end

    for key,value in pairs(self.mDictionaryAudioSource) do
        if value.mAudioSource~=nil then
            if value.mAudioSource.isPlaying~= true then
                GameObject.Destroy(value.mAudioSource.gameObject)
                value.mAudioSource=nil
                table.remove(self.mDictionaryAudioSource,key)

                ResourcesManager.GetSingleton():UnloadOne(value.mAudioPath);
                UnityEngine.Debug.Log("Unload:" .. value.mAudioPath)
            end
        end
    end
end

return AudioManager