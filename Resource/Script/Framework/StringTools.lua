---
----- Generated by EmmyLua(https://github.com/EmmyLua)
----- Created by Administrator.
----- DateTime: 2018/9/14 12:24
-----
StringTools = {}

local numberToChineseList = { '零', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '百', '千', '万', "亿" }
local chinesNumberList = { '零', '一', '二', '三', '四', '五', '六', '七', '八', '九' }
local unitChineseNumberList = { '十', '百', '千', '万', '十万', '百万', '千万', '亿' }
local unitNumberList = { 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000 }

--数字转换中文
function StringTools:GetNumberToChinese(number)
    if type(number) == "number" or number < 0 then
        if number < 10 then
            return chinesNumberList[number + 1]
        else
            local concatT = {}
            local chushu
            local yushu
            for i = #unitNumberList, 0, -1 do
                if i == #unitNumberList then
                    yushu = number
                else
                    yushu = yushu % unitNumberList[i + 1]
                end
                if i == 0 then
                    if yushu > 0 then
                        concatT[#concatT + 1] = chinesNumberList[yushu + 1]
                    end
                else
                    chushu = math.floor(yushu / unitNumberList[i])
                    if chushu > 0 then
                        concatT[#concatT + 1] = chinesNumberList[chushu + 1] .. unitChineseNumberList[i]
                    else
                        if #concatT > 0 and concatT[#concatT] ~= chinesNumberList[1] then
                            concatT[#concatT + 1] = chinesNumberList[1]
                        end
                    end
                end
            end
            if number < 20 then
                concatT[1] = unitChineseNumberList[1]
            end
            local concatStr = table.concat(concatT)
            local tenThouCount = 0
            for w in string.gmatch(concatStr, '万') do
                tenThouCount = tenThouCount + 1
            end
            if tenThouCount > 1 then
                for i = 1, tenThouCount - 1 do
                    concatStr = string.gsub(concatStr, '万', '', 1)
                end
            end
            return concatStr
        end
    else
        Debug.LogError("getSimpleChsNum error not a normal number")
        return number
    end
end

--“中文数字转”换成“中文数字单位”：返回是下标索引--从0开始算
function StringTools:GetChineseToNumber(chineseNumber)
    local index = 0
    for i = 1, #numberToChineseList do
        if numberToChineseList[i] == chineseNumber then
            break
        else
            index = index + 1
        end
    end
    return index
end


--字符串分割函数，传入字符串和分隔符，返回分割后的table
function StringTools:Split(input, delimiter)
    if input == nil or input == '' or delimiter == nil then
        return nil
    end

    local result = {}
    for match in (input .. delimiter):gmatch("(.-)" .. delimiter) do
        table.insert(result, match)
    end
    return result
end

function StringTools:Split2(input, delimiter)
    local input = tostring(input)
    delimiter = tostring(delimiter)
    if (delimiter=='') then return false end
    local pos,arr = 0, {}
    -- for each divider found
    for st,sp in function() return string.find(input, delimiter, pos, true) end do
        table.insert(arr, string.sub(input, pos, st - 1))
        pos = sp + 1
    end
    table.insert(arr, string.sub(input, pos))
    return arr
end


--string to array
function StringTools:StringToArray(input)
    local content = tostring(input)
    if content == nil then
        return nil
    end
    local newContent = Helper.StringToArray(content)
    local array
    if newContent ~= nil then
        array = self:Split(newContent, ',')
    end
    return array
end


--字符串按位分割函数:传入字符串，返回分割后的table，必须为字母、数字，否则返回nil
function StringTools:StringToArrry2(str)
    local str_tb = {}
    local new_str
    if string.len(str) ~= 0 then
        for i=1,string.len(str) do
            new_str= string.sub(str,i,i)
            if (string.byte(new_str) >=48 and string.byte(new_str) <=57) or (string.byte(new_str)>=65 and string.byte(new_str)<=90) or (string.byte(new_str)>=97 and string.byte(new_str)<=122) then
                table.insert(str_tb,string.sub(str,i,i))
            else
                return nil
            end
        end
        return str_tb
    else
        return nil
    end
end




return StringTools