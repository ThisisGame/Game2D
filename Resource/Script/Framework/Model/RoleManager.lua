---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/9/7 14:03
---@type RoleManager

require("ProtoLua/pet_pb.lua")
require("ProtoLua/equip_pb.lua")
require("ProtoLua/rank_pb.lua")
require("ProtoLua/friend_pb.lua")

require("UI/UI_Role/UI_Role_Ctrl.lua")

require("UI/UI_Role/UI_Role_RoleInfoCtrl.lua")
require("UI/UI_Role/UI_Role_RolePropertyCtrl.lua")
require("UI/UI_Role/UI_Role_RoleSkillCtrl.lua")
require("UI/UI_Role/UI_Role_PetInfoCtrl.lua")
require("UI/UI_Role/UI_Role_RideInfoCtrl.lua")
require("UI/UI_Role/UI_Role_WingInfoCtrl.lua")
require("UI/UI_Role/UI_Role_PetInfoCtrl.lua")
require("UI/UI_Role/UI_Role_PetSkillTipsCtrl.lua")
require("UI/UI_Role/UI_Role_FootInfoCtrl.lua")
require("UI/UI_Role/UI_Role_TrumpInfoCtrl.lua")
require("UI/UI_Role/UI_Role_XianQiInfoCtrl.lua")
require("UI/UI_Role/UI_Role_TitleInfoCtrl.lua")
require("UI/UI_Role/UI_Role_ArtiFactInfoCtrl.lua")
require("UI/UI_Role/UI_Role_GodWeaponInfoCtrl.lua")
require("UI/UI_Role/UI_Role_FieldInfoCtrl.lua")
require("UI/UI_Role/UI_Role_MustDoneInfoCtrl.lua")
require("UI/UI_Role/UI_Role_RuneInfoCtrl.lua")


RoleManager = {
    --获取共用属性名称 GM_OtherInfo_FightInfo
    fightInfoName = {
        "health",         --生命
        "attack",         --攻击
        "defence",        --防御
        "crit",           --暴击
        "toughness",      --韧性
        "hit",            --命中
        "doge",           --闪避
        "pvpadd",         --pvp伤害加成
        "pveadd",         --pve伤害加成
        "pvpless",        --pvp伤害减免
        "pveless",        --pve伤害减免
        "dmgadd",         --最终伤害加成
        "dmgless",        --最终伤害减伤
        "expplus"        --额外经验加成
    }
}
local roleID = 0

function RoleManager:Register()
    EventDispatch:RegisterEventCallback(EventId.Open_UI_Role_Panel, self, self.OpenRolePanel)

    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_PLAYER_RETURN, self, self.GM_PLAYER_OTHER_PLAYER_RETURN)              --人物信息
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_PROPERTY_RETURN, self, self.GM_PLAYER_OTHER_PROPERTY_RETURN)          --属性信息
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_SKILL_RETURN, self, self.GM_PLAYER_OTHER_SKILL_RETURN)                --技能信息
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_PET_RETURN, self, self.GM_PLAYER_OTHER_PET_RETURN)                    --伙伴信息

    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_TITLE_RETURN, self, self.GM_PLAYER_OTHER_TITLE_RETURN)                --称号信息
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_SUITEQUIP_RETURN, self, self.GM_PLAYER_OTHER_SUITEQUIP_RETURN)        --套装信息
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_RIDE_RETURN, self, self.GM_PLAYER_OTHER_RIDE_RETURN)                  --坐骑信息
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_WING_RETURN, self, self.GM_PLAYER_OTHER_WING_RETURN)                  --翅膀信息

    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_FOOT_RETURN, self, self.GM_PLAYER_OTHER_FOOT_RETURN)                    -- 足迹
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_TRUMP_RETURN, self, self.GM_PLAYER_OTHER_TRUMP_RETURN)                  -- 玄兵
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_XIANQI_RETURN, self, self.GM_PLAYER_OTHER_XIANQI_RETURN)                -- 仙器
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_ARTIFACT_RETURN, self, self.GM_PLAYER_OTHER_ARTIFACT_RETURN)            -- 法宝
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_GODWEAPON_RETURN, self, self.GM_PLAYER_OTHER_GODWEAPON_RETURN)          -- 神兵
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_FIELD_RETURN, self, self.GM_PLAYER_OTHER_FIELD_RETURN)                  -- 领域
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_MUSTDONE_RETURN, self, self.GM_PLAYER_OTHER_MUSTDONE_RETURN)            -- 道铠
    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_RUNE_RETURN, self, self.GM_PLAYER_OTHER_RUNE_RETURN)                    -- 符文

    NetMsgDispatch:RegisterNetMsgCallback(GameMessage.GM_PLAYER_OTHER_NOTIFY, self, self.GM_PLAYER_OTHER_NOTIFY)--通知客户端 玩家数据获取中
end

--人物信息
function RoleManager:GM_PLAYER_OTHER_PLAYER_RETURN()
    local msg = rank_pb.GM_OtherInfo_PlayerInfo()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("人物信息:" .. tostring(msg))
    self.roleInfo = msg
    UI_Role_RoleInfoCtrl:SetData(msg)
end
--属性信息
function RoleManager:GM_PLAYER_OTHER_PROPERTY_RETURN()
    local msg = rank_pb.GM_OtherInfo_PlayerProperty()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("属性信息:" .. tostring(msg))
    UI_Role_RolePropertyCtrl:SetData(msg)
end
--技能信息
function RoleManager:GM_PLAYER_OTHER_SKILL_RETURN()
    local msg = rank_pb.GM_OtherInfo_PlayerSkill()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("技能信息:" .. tostring(msg))
    UI_Role_RoleSkillCtrl:SetData(msg)
end
--伙伴信息
function RoleManager:GM_PLAYER_OTHER_PET_RETURN()
    local msg = rank_pb.GM_OtherInfo_PlayerPet()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("伙伴信息:" .. tostring(msg))
    UI_Role_PetInfoCtrl:SetData(msg)
end
--称号信息
function RoleManager:GM_PLAYER_OTHER_TITLE_RETURN()
    local msg = rank_pb.GM_OtherInfo_PlayerTitle()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("称号信息:" .. tostring(msg))
    UI_Role_TitleInfoCtrl:SetData(msg)
end
--套装信息
function RoleManager:GM_PLAYER_OTHER_SUITEQUIP_RETURN()
    local msg = rank_pb.GM_OtherInfo_PlayerSuitEquip()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("套装信息:" .. tostring(msg))
    --UI_Role_RoleInfoCtrl:SetData(msg)
end
--坐骑信息
function RoleManager:GM_PLAYER_OTHER_RIDE_RETURN()
    local msg = rank_pb.GM_OtherInfo_Ride()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("坐骑信息:" .. tostring(msg))
    UI_Role_RideInfoCtrl:SetData(msg)
end
--翅膀信息
function RoleManager:GM_PLAYER_OTHER_WING_RETURN()
    local msg = rank_pb.GM_OtherInfo_Wing()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("翅膀信息:" .. tostring(msg))
    UI_Role_WingInfoCtrl:SetData(msg)
end

-- 足迹
function RoleManager:GM_PLAYER_OTHER_FOOT_RETURN()
    local msg = rank_pb.GM_OtherInfo_Foot()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("足迹信息:" .. tostring(msg))
    UI_Role_FootInfoCtrl:SetData(msg)
end
--玄兵
function RoleManager:GM_PLAYER_OTHER_TRUMP_RETURN()
    local msg = rank_pb.GM_OtherInfo_Trump()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("玄兵信息:" .. tostring(msg))
    UI_Role_TrumpInfoCtrl:SetData(msg)
end
--仙器
function RoleManager:GM_PLAYER_OTHER_XIANQI_RETURN()
    local msg = rank_pb.GM_OtherInfo_Xianqi()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("仙器信息:" .. tostring(msg))
    UI_Role_XianQiInfoCtrl:SetData(msg)
end
--法宝
function RoleManager:GM_PLAYER_OTHER_ARTIFACT_RETURN()
    local msg = rank_pb.GM_OtherInfo_Artifact()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("法宝信息:" .. tostring(msg))
    UI_Role_ArtiFactInfoCtrl:SetData(msg)
end
--神兵
function RoleManager:GM_PLAYER_OTHER_GODWEAPON_RETURN()
    local msg = rank_pb.GM_OtherInfo_GodWeapon()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("神兵信息:" .. tostring(msg))
    UI_Role_GodWeaponInfoCtrl:SetData(msg)
end
--领域
function RoleManager:GM_PLAYER_OTHER_FIELD_RETURN()
    local msg = rank_pb.GM_OtherInfo_Field()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("领域信息:" .. tostring(msg))
    UI_Role_FieldInfoCtrl:SetData(msg)
end
--道铠
function RoleManager:GM_PLAYER_OTHER_MUSTDONE_RETURN()
    local msg = rank_pb.GM_OtherInfo_MustDone()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("道铠信息:" .. tostring(msg))
    UI_Role_MustDoneInfoCtrl:SetData(msg)
end
--符文
function RoleManager:GM_PLAYER_OTHER_RUNE_RETURN()
    local msg = rank_pb.GM_OtherInfo_Rune()
    msg:ParseFromString(ProtobufStringData.data)
    Debug.Log("符文信息:" .. tostring(msg))
    UI_Role_RuneInfoCtrl:SetData(msg)
end

--通知客户端 玩家数据获取中
function RoleManager:GM_PLAYER_OTHER_NOTIFY()
    WindowManager.GetSingleton():OpenFlyUpFont(Localization.Get("Role_Info_Getting"))
end

--查看其它玩家基本信息
function RoleManager:GM_PLAYER_OTHER_REQUEST(panelType)
    if roleID == nil and panelType == nil then
        return
    end
    local requestMsg = rank_pb.GM_OtherInfo_Request()
    requestMsg.classfy = panelType
    requestMsg.roleid = roleID
    ProtobufStringData.data = requestMsg:SerializeToString()
    ClientManager.GetSingleton().Logic:SendMessageFromLua(GameMessage.GM_PLAYER_OTHER_REQUEST)
end

--打开界面
function RoleManager:OpenRolePanel(varRoleID)
    roleID = varRoleID
    WindowManager.GetSingleton():CloseWindow(UI_Path.UI_Rank_Path)
    WindowManager.GetSingleton():OpenWindow(UI_Path.UI_Role_Panel, function(go)
        Debug.Log("RoleManager.OpenPanel：" .. tostring(go))
    end, null, false)
end

--获取共用属性数量 GM_OtherInfo_FightInfo
function RoleManager:GetNumberOfAttributes(fields)
    if fields == nil then
        return 0
    end

    local count = 0
    for k, v in pairs(fields) do
        if type(v) == "number" and v > 0 then
            count = count + 1
        end
    end
    return count
end

return RoleManager